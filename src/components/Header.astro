---
import ThemeToggle from "./ThemeToggle.astro"
import SelectLanguage from '../components/SelectLanguage.astro'
import { getLangFromUrl, useTranslations } from "../i18n/utils"

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const navList = t('navItems')
---

<header
  class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2"
>
  <nav
    class="flex px-3 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center"
  >
    {Array.isArray(navList) && navList.map((item) =>(
      <a
        class="relative block px-2 py-2 transition hover:text-blue-500 dark:hover:text-blue-500"
        aria-label={item.label}
        href={item.url.startsWith('mailto:') ? item.url : `/${lang}${item.url}`} 
      >
        {item.title}
      </a>
    ))}
    
    <div class="flex gap-2 items-center">
      <ThemeToggle />
      <SelectLanguage/>  <!-- Asegurarse de que SelectLanguage siga funcionando después de la actualización del idioma -->
    </div>
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section")
    const navItems = document.querySelectorAll("header nav a")

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-blue-500")
            } else {
              item.classList.remove("text-blue-500")
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  nav {
    @apply dark:bg-gray-800/90 bg-white/50;
  }

  @keyframes nav-shadown {
    0% {
      @apply dark:bg-gray-800/0 bg-white/0;
    }
    to {
      @apply shadow-lg ring-1 backdrop-blur ring-white/10;
    }
  }
</style>
